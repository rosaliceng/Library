// <auto-generated />
using System;
using LibraryWebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryWebAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220824225858_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("LibraryWebAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Launch")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PublisherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRented")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Jk Rowling",
                            Launch = new DateTime(2000, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Harry Potter e o Cálice de fogo",
                            PublisherId = 1,
                            Quantity = 10,
                            TotalRented = 23
                        },
                        new
                        {
                            Id = 2,
                            Author = "Drauzio Varella",
                            Launch = new DateTime(1999, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Estação Carandiru",
                            PublisherId = 3,
                            Quantity = 68,
                            TotalRented = 90
                        },
                        new
                        {
                            Id = 3,
                            Author = "Antoine de Saint-Exupéry",
                            Launch = new DateTime(1943, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "O pequeno príncipe",
                            PublisherId = 4,
                            Quantity = 10,
                            TotalRented = 36
                        },
                        new
                        {
                            Id = 4,
                            Author = "Rick Riordan",
                            Launch = new DateTime(2005, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Percy Jackson e o Ladrão de raios",
                            PublisherId = 2,
                            Quantity = 3,
                            TotalRented = 23
                        });
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "São Paulo",
                            Name = "Saraiva"
                        },
                        new
                        {
                            Id = 2,
                            City = "Rio de Janeiro",
                            Name = "Intríseca"
                        },
                        new
                        {
                            Id = 3,
                            City = "Fortaleza",
                            Name = "Arqueiro"
                        },
                        new
                        {
                            Id = 4,
                            City = "Fortaleza",
                            Name = "Bem me quer"
                        });
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Rent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DevolutionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            DevolutionDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForecastDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 3,
                            DevolutionDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForecastDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 4,
                            DevolutionDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForecastDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            BookId = 2,
                            DevolutionDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForecastDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentDate = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("LibraryWebAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Rua A",
                            City = "Fortaleza",
                            Email = "rosa@gmail.com",
                            Name = "Rosa"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Rua B",
                            City = "Caucaia",
                            Email = "alice@gmail.com",
                            Name = "Alice"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rua C",
                            City = "Fortaleza",
                            Email = "andre@gmail.com",
                            Name = "André"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Rua D",
                            City = "Fortaleza",
                            Email = "naua@gmail.com",
                            Name = "Nauã"
                        });
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Book", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryWebAPI.Models.Rent", b =>
                {
                    b.HasOne("LibraryWebAPI.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryWebAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
